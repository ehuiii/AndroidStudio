// === 1. 변수 A와 B를 선언하고, 두 변수의 값을 비교하라. ===
val A: Int = 11
val B: Int = 10
val C: Boolean = if (A == B) true else false
println(C)



// === 2. 정수형 변수 AA를 선언하고, 변수 BB는 AA의 두배가 되도록 하라. ===
val AA: Int = 10
val BB: Int = AA * 2
println(BB)



// === 3. 점수에 따른 학점을 계산하라. ===
fun checkGrade(score: Int): String {
    if (score >= 90) return "A학점"
    else if (score >= 80) return "B학점"
    else if (score >= 70) return "C학점"
    else return "F학점"
}

val result: String = checkGrade(90)
println(result)



// === 4. 시험에서 맞은 문제의 개수를 작성하면, 시험 점수 반환하도록 하라. ===
fun gradeTest(correctCount: Int): Int {
    return correctCount * 5
}

fun gradeTest2(correctCount: Int): Int = correctCount * 5
println(gradeTest(10))
println(gradeTest2(10))



// === 5. nullable 정수형 두개를 받는 함수를 만들고, 인수 합을 반환하도록 하라. ===
fun plustTwoNumbers(firstNum: Int?, secondNum: Int?): Int {
    val first: Int = if (firstNum == null) 0 else firstNum
    val second: Int = if (secondNum == null) 0 else secondNum
    return first + second
}
println(plustTwoNumbers(null, null))



// === 6. 배열 예제 ===
var array1 = arrayOf(true, "Hi", 10, 2.2, null)
println(array1) //자료형 생략했을 경우 복수개의 자료형이 배열의 인자로 올 수 있음. non-null, nullalble

var array2 = arrayOf<Int?>(1, 2, 3, 4, 5, null)
var array3 = intArrayOf(1, 2, 3, 4, 5)

val examScore1: Int = 100
val examScore2: Int = 200
var examScores = arrayOf<Int>(examScore1, examScore2)
println(examScores)



// === 7. 주어진 문자를 N번 반복하여 출력하는 함수 ===
fun repeatText(repeatText: String, repeatNumber: Int) {
    for (i in 0..repeatNumber) println(repeatText)  //3회
    for (i in 1..repeatNumber) println(repeatText)  //2회
    for (i in 0 until repeatNumber) println(repeatText) //2회
}
repeatText("안녕", 2)



// === 8. 1부터 주어진 숫자까지의 합 구하는 함수 ===
fun sumUntil(givenNumber: Int): Int {
    var sum: Int = 0
    for (i in 1..givenNumber) sum += i
    return sum
}
sumUntil(10)    //55



// === 9. 1부터 100까지의 수 중에서 7의 배수의 합을 구하는 함수 ===
fun sum7s(): Int {
    var sum: Int = 0
    for (i in 0..100) {
        if (i % 7 == 0) sum += i
    }
    return sum
}
sum7s()         //735



// === 10. 100보다 작은 숫자를 넣어주면, 1씩 증가시키고 100이 되면 종료되는 함수
fun increaseOne(numberUnder100: Int) {
    var givenNumber: Int = numberUnder100
    while (givenNumber < 100) { //100 이하면 증가시킨 후 up 출력
        givenNumber++
        println("up")
    }
    return
}
increaseOne(99)



// === 11. 시험 성적 리스트의 동일한 크기의 배열을 만들고, 합격 시 true, 불합격 시 false를 담는 함수 ===
fun checkPassOrNot(examScores: List<Int>): BooleanArray {
    val resultArray = BooleanArray(examScores.size, { false })
    examScores.forEachIndexed { index, score ->
        if (score >= 80)
            resultArray[index] = true
        else
            resultArray[index] = false
    }
    return resultArray
}

val result = checkPassOrNot(listOf<Int>(70, 71, 72, 77, 78, 79, 80, 82, 90, 99))
result.forEach {
    println(it)
}



// === 12. 두 개의 주사위를 던졌을 때, 눈의 합이 6이 되는 모든 경우의 수 출력
fun findSumIsSixFromDice(): List<List<Int>> {
    val resultList = mutableListOf<List<Int>>()
    for (i in 1..6) {
        for (j in 1..6) {
            if (i + j == 6) resultList.add(listOf<Int>(i, j))
        }
    }
    return resultList
}
println(findSumIsSixFromDice())



// === 13. 배부르기 위해 먹어야하는 총 밥 먹기 횟수, 현재 밥먹은 횟수, 두 개를 받는 함수 ===
fun eatUntilNotHungry(totalCount: Int, currentCount: Int) {
    var currentCountCopy: Int = currentCount
    do {
        println("밥을 먹었다")
        currentCountCopy++
    } while (currentCountCopy < totalCount)
    println("배가 부르다")
}
eatUntilNotHungry(10, 5)


// === 14. 병사 그룹 2개와 n번째 값을 넣어주면, 각각의 병사 그룹에서 n번째 병사를 제거하고 2개의 병사 그룹을 합쳐주는 함수 ===
fun killArmy(
    firstArmy: List<String>,    //첫번째 병사 그룹
    secondArmy: List<String>,   //두번째 병사그룹
    kill: Int                   //제거하는 병사 순서 번째
): List<List<String>>? {
    if (firstArmy.size < kill || secondArmy.size < kill) return null    //제거하는 번째가 전체의 수보다는 적어야 함

    val firstArmyTemp = mutableListOf<String>()
    val secondArmyTemp = mutableListOf<String>()

    for ((index, army) in firstArmy.withIndex()) {
        if (index != kill) firstArmyTemp.add(army)  //제거하는 번째가 아니면 더하라
    }
    for ((index, army) in secondArmy.withIndex()) {
        if (index != kill) secondArmyTemp.add(army) //제거하는 번째가 아니면 더하라
    }
    val result = listOf<List<String>>(firstArmyTemp, secondArmyTemp)    //결과 값
    return result
}

println(
    killArmy(
        firstArmy = listOf<String>("A", "B", "C", "D", "E"),
        secondArmy = listOf<String>("A", "B", "C"),
        kill = 2    //C 없애기
    )
)



// === 15. 단을 입력 받아, 해당 단수의 값을 리스트로 출력하는 함수 ===
fun gugudan(dan: Int) {
    val numbers = mutableListOf<Int>()
    for (i in 1..9) numbers.add(dan * i)
    println(numbers)
}
gugudan(8)



// === 16. 숫자 리스트 2개를 넣어주면 짝수 홀수로 분리된 Map을 만드는 함수 ===
fun splitNumbers(firstIntList: List<Int>, secondIntList: List<Int>): Map<String, List<Int>> {
    val result = mutableMapOf<String, List<Int>>()
    val totalIntList = mutableListOf<Int>()
    totalIntList.addAll(firstIntList)   //리스트 1
    totalIntList.addAll(secondIntList)  //리스트 2

    val eventNumber = mutableListOf<Int>()  //짝수
    val oddNumber = mutableListOf<Int>()    //홀수

    totalIntList.forEach { number ->
        if (number % 2 == 0) eventNumber.add(number)
        else oddNumber.add(number)
    }
    result.put("짝수", eventNumber)
    result.put("홀수", oddNumber)
    return result
}
println(
    splitNumbers(listOf<Int>(1, 2, 3, 4, 5), listOf<Int>(6, 7, 8, 9, 10))
)
